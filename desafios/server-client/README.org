#+title: Challenge #1: Server-Client simulation

* Script
To run the server and client, you can use the following script:
#+begin_src shell
./run-client-server.bash
#+end_src

Which runs:
#+begin_src shell
#!/bin/bash
PWD=$(pwd)
BASENAME=$(basename $PWD)

if $BASENAME != "server-client"; then
    echo "Please, run this script from 'server-client' directory"
    exit 1
else
    # sudo docker compose exec db bash
    go run main.go
fi
#+end_src
* Setup (current: 240215134928-03)
No setup needed. Sqlite database will be local (=local.db=). The db will be on the same directory as =cotacao.txt=.
* Setup (Old)
The setup of the server and client is done using Docker Compose. And involves
only a MySQL database.

** Database
How it's done:
#+begin_src shell
sudo docker compose up -d
#+end_src

Which uses the following setup for a MySQL database (MariaDB):
#+begin_src yaml
version: '3.1'

volumes:
  data:

services:

  db:
    image: mariadb
    restart: always
    container_name: challenge1DB
    environment:
      MARIADB_ROOT_PASSWORD: pass
      MYSQL_DATABASE: challenge1
      MYSQL_USER: user
      MYSQL_PASSWORD: pass
    volumes:
      - data:/var/lib/mysql
    ports:
      - "3306:3306"
#+end_src

** Checking the database (after running the server and client)
#+begin_src shell
sudo docker compose exec db bash
#+end_src

#+begin_src shell
mariadb --user=user --password=pass challenge1
#+end_src

#+begin_src shell
SHOW TABLES;
SELECT * FROM bids;
#+end_src
* Introdução (Instrutions)
** Overview
Neste desafio vamos aplicar o que aprendemos sobre webserver http, contextos,
banco de dados e manipulação de arquivos com Go.

Você precisará nos entregar dois sistemas em Go:
- =client.go=
- =server.go=


O =client.go= deverá realizar uma *requisição HTTP* no =server.go= solicitando a cotação do dólar.

O =server.go= deverá consumir a API contendo o câmbio de Dólar e Real no endereço:
https://economia.awesomeapi.com.br/json/last/USD-BRL e em seguida deverá
retornar no formato JSON o resultado para o cliente.

** Especificações (Specifications for the Server and Client)
*** DONE =Server.go=
Usando o package "context", o server.go deverá registrar no banco de dados
SQLite cada cotação recebida, sendo que o timeout máximo para chamar a API de
cotação do dólar deverá ser de 200ms e o timeout máximo para conseguir persistir
os dados no banco deverá ser de 10ms.


**** Convenções
O endpoint necessário gerado pelo =server.go= para este desafio será: /cotacao e a
porta a ser utilizada pelo servidor HTTP será a 8080.

*** DONE =Client.go=
O client.go precisará receber do server.go apenas o valor atual do câmbio (campo
"bid" do JSON). Utilizando o package "context", o client.go terá um timeout
máximo de 300ms para receber o resultado do server.go.


**** I/O Outputs
O client.go terá que salvar a cotação atual em um arquivo "cotacao.txt" no
formato: Dólar: {valor}

*** DONE Casos limites
Os 3 contextos deverão retornar erro nos logs caso o tempo de execução seja
insuficiente.
