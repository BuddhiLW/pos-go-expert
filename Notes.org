#+title: Readme
* DONE Types and variables declaration
DEADLINE: <2023-12-04 Mon> SCHEDULED: <2023-12-04 Mon>

#+begin_src go
package main

import "fmt"


type ID int

var (b bool = true
	c int = 10
	d string = "Pedro"
	e float64 = 10.0
	f ID = 1)

const a = "Olá, mundo!"

func main() {
	fmt.Printf("Mensagem do fantasma da máquina: %v \n", a)
	fmt.Printf("O tipo criado pelo fantasma da máquina: %T \n", f)
	fmt.Printf("Exemplos de tipos nativos: %T %T %T %T", b, c, d, e)
}
#+end_src

#+RESULTS:
: Mensagem do fantasma da máquina: Olá, mundo!
: O tipo criado pelo fantasma da máquina: main.ID
: Exemplos de tipos nativos: bool int string float64

* DONE Structs and Interfaces
DEADLINE: <2023-12-06 Wed> SCHEDULED: <2023-12-06 Wed>

#+begin_src go :tangle ./fundacao/structs.go
package fundacao

import "fmt"

// Custom Type StruFoo
type StruFoo struct {
	S string
	I int
	B bool
}

// Composed custom type StruFooBar
type StruFooBar struct {
	SS []string
	II []int
	BB []bool
	StruFoo
}

// Custom type, StruBarfoo, relying on another Custom Type, StruFoo
type StruBarfoo struct {
	SS   []string
	II   []int
	BB   []bool
	SFoo StruFoo
}

func Structs() {
	struFoo := StruFoo{
		S: "Foo",
		I: 256,
		B: true,
	}

	struFooBar := StruFooBar{
		SS:      []string{"Foo", "Bar"},
		II:      []int{256, 512},
		BB:      []bool{true, false},
		StruFoo: struFoo,
	}

	struBarfoo := StruBarfoo{
		SS:   []string{"Foo", "Bar"},
		II:   []int{256, 512},
		BB:   []bool{true, false},
		SFoo: struFoo,
	}
	fmt.Printf("struFoo: %v %T \n", struFoo, struFoo)
	fmt.Printf("struFooBar: %v %T \n", struFooBar, struFooBar)
	fmt.Printf("struBarfoo: %v %T \n\n", struBarfoo, struBarfoo)

	fmt.Println("Struct instances of StruFooBar and StruBarfoo will look identical, but aren't.")
	fmt.Println("Composition vs Standard type (implies direct access vs not direct access):")
	fmt.Printf("struFooBar.S (%v) == struBarfoo.SFoo.S (%v)? %v", struFooBar.S, struBarfoo.SFoo.S, struFooBar.S == struBarfoo.SFoo.S)
}
#+end_src

#+begin_src shell :results verbatim
go run ./main.go
#+end_src

#+RESULTS:
: struFoo: {Foo 256 true} fundacao.StruFoo
: struFooBar: {[Foo Bar] [256 512] [true false] {Foo 256 true}} fundacao.StruFooBar
: struBarfoo: {[Foo Bar] [256 512] [true false] {Foo 256 true}} fundacao.StruBarfoo
:
: Struct instances of StruFooBar and StruBarfoo will look identical, but aren't.
: Composition vs Standard type (implies direct access vs not direct access):
: struFooBar.S (Foo) == struBarfoo.SFoo.S (Foo)? true
* DONE Interfaces
* DONE Pointers and Variables
When functions operate on variables it will make a copy, and operate on the copy.

If you want to mutate, you have to use pointers.

#+begin_src go :tangle ./fundacao/pointers-variables.go
package fundacao

import "fmt"

func (s *StruFoo) FM1() {
	s.S = "passed through FM1"
	fmt.Println("Passing through FM1, we have:", s.S)
}

func (s StruFoo) FnM2() {
	s.S = "passed through FM2"
	fmt.Println("Passing through FnM2, we have:", s.S)
}

func pointers() {
	i := StruFoo{
		S: "Foo",
		I: 256,
		B: true,
	}

	fmt.Println("Pointers:")
	fmt.Println("i value is:", i)
	p := &i
	p.FM1()
	fmt.Println("p is a pointer for i:", p)
	fmt.Println("after p.FM1(), we have: i.S =", i.S)
	i.FnM2()
	fmt.Println("after i.FnM2(), we have: i.S =", i.S)
}
#+end_src

* DONE Modules
A working manner to use any modules - either internal or external to the project - is to:
1) Import the module inside a go file.
2) Go to the root of the project, in a terminal
3) Run `go mod tidy`

Example of (1):
#+begin_src go
import (
	"fmt"
	"log"
	"os"

	"github.com/google/uuid"
)
#+end_src

This example uses several different `import`s. Both from an external project, and from the _core_ libraries language of go.

Example two of (1):
#+begin_src go
import (
	"fmt"

	fundacao "github.com/buddhilw/pos-go-expert/fundacao"
)
#+end_src

This example `import`s from the _core_ libraries (=fmt=) and from a internal module (=fundacao=)

Final consideration:
=go mod tidy= will automatically figure the dependency trees and version for the current project and update the list of dependencies, in case a new one is being used, or any of them is not being used (and then is discarded from the list).
* HOLD Common Libraries
** TODO OS (Filesystem manipulation)
** TODO JSON Marshall/Unmarshall
** TODO HTTP Calls
*** TODO CEP HTTP call
* HOLD Working with DBs - MariaDB (MySQL fork)
** Setup
#+begin_src shell
cd banco-de-dados
sudo docker compose up -d
#+end_src

Enter the container, using a bash command line
#+begin_src shell
sudo docker compose exec db bash
#+end_src

#+begin_src shell
mariadb --user=buddhilw --password=pass goexpert
create table products (id varchar(255), name varchar(80), price decimal(10,2), primary key (id));
#+end_src
** Code inserting data in DB
#+begin_src go
package db

import (
	"database/sql"

	_ "github.com/go-sql-driver/mysql"
	"github.com/google/uuid"
)

type Product struct {
	ID    string
	Name  string
	Price float64
}

func NewProduct(name string, price float64) *Product {
	return &Product{
		ID:    uuid.New().String(),
		Name:  name,
		Price: price,
	}
}

func ConnectDB() *sql.DB {
	// connect to database
	db, err := sql.Open("mysql", "buddhilw:pass@tcp(localhost:3306)/goexpert")
	if err != nil {
		panic(err)
	}
	return db
}

func InsertProductDB(db *sql.DB, product *Product) error {
	stmt, err := db.Prepare("INSERT INTO products(id, name, price) VALUES(?, ?, ?)")
	if err != nil {
		return err
	}
	defer stmt.Close()

	_, err = stmt.Exec(product.ID, product.Name, product.Price)
	if err != nil {
		return err
	}
	return nil
}

func NewProductExample() {
	db := ConnectDB()
	defer db.Close()

	product := NewProduct("new product", 10.0)
	err := InsertProductDB(db, product)
	if err != nil {
		panic(err)
	}
}
#+end_src

** Show data from MariaDB
Inside the =mysql= command line
#+begin_src shell
SHOW TABLES;
SELECT * FROM products;
#+end_src

#+begin_quote
+--------------------------------------+-------------+-------+
| id                                   | name        | price |
+--------------------------------------+-------------+-------+
| 87e5827a-f4e4-44b6-bbd6-f42d58a9dcd9 | new product | 10.00 |
+--------------------------------------+-------------+-------+
1 row in set (0.000 sec)
#+end_quote
** GORM
#+begin_src go
type Product struct {
	ID    int `gorm:"primary_key"`
	Name  string
	Price float64
}

func ConnectDB() *gorm.DB {
	dns := "buddhilw:pass@tcp(localhost:3306)/goexpert"
	db, err := gorm.Open(mysql.Open(dns), &gorm.Config{})
	if err != nil {
		panic(err)
	}
	return db
}

func Migration(db *gorm.DB) {
	db.AutoMigrate(&Product{})
}

func AutoMigrateExample() {
	db := ConnectDB()
	Migration(db)
}
#+end_src

#+begin_export output
MariaDB [goexpert]> describe products;
+-------+------------+------+-----+---------+----------------+
| Field | Type       | Null | Key | Default | Extra          |
+-------+------------+------+-----+---------+----------------+
| id    | bigint(20) | NO   | PRI | NULL    | auto_increment |
| name  | longtext   | YES  |     | NULL    |                |
| price | double     | YES  |     | NULL    |                |
+-------+------------+------+-----+---------+----------------+
3 rows in set (0.001 sec)


MariaDB [goexpert]> select * from products;
+----+----------+-------+
| id | name     | price |
+----+----------+-------+
|  1 | Laptop   |  1000 |
|  2 | Mouse    |   100 |
|  3 | Keyboard |   250 |
|  4 | Monitor  |   500 |
+----+----------+-------+
4 rows in set (0.000 sec)
#+end_export

*** Questions
In what moment the table =products= was created/implied in migration? If we changed the =type= to =airplane=, would the table be called =airplanes=, in migration?
* TODO Threads, Parallelism and Concurrency

#+begin_src go :tangle ./go-routines/code.go
package routines

import (
	"fmt"
	"time"
)

func task(name string) {
	for i := 0; i < 10; i++ {
		fmt.Printf("%d: Task %s is running \n", i, name)
		time.Sleep(1 * time.Second)
	}
}

func main() {
	go task("A")
	go task("B")
}
#+end_src
** TODO Notes on a Pub/Sub logic
*** *User input for chatgpt*
#+begin_src go
// Thread 1
func Channels(n int) {
	channel := make(chan string)

	var count int = 0
	// Thread 2
	go func() {
		for i := 1; i < n+1; i++ {
			var t time.Time
			if i == 1 {
				channel <- "Hello world! My first message in this Go Channel!"
				t = time.Now()
				fmt.Println("Thread 2 (pub), started filling channel, at the first time at:", t.Format("15:04:05.000000000"))
				count++

				time.Sleep(10 * time.Millisecond)
			} else {
				t = time.Now()
				fmt.Printf("Thread 2 (pub), filling channel again (%d time) at: %s\n", i, t.Format("15:04:05.000000000"))
				channel <- "Hello, filling out the channel again, after 2 seconds!"
				count++

				time.Sleep(10 * time.Millisecond)
			}
		}
		close(channel)
	}()

	// Pub -> competitive Sub
	for i := range channel {
		go func() {
			fmsg := <-channel
			fmt.Println(fmsg + " (sub from Thread 3)\n")
			count++
		}()

		// Thread 4
		go func() {
			fmsg := <-channel
			fmt.Println(fmsg + " (sub from Thread 4)\n")
			count++
		}()

		// Thread 1
		msg := i
		fmt.Println(msg + " (sub from Thread 1)\n")
	}
}
#+end_src

outputs, with n=12:

#+begin_src output
Thread 2 (pub), started filling channel, at the first time at: 11:39:30.775683572
Hello world! My first message in this Go Channel! (sub from Thread 1)

Thread 2 (pub), filling channel again (2 time) at: 11:39:30.785861485
Hello, filling out the channel again, after 2 seconds! (sub from Thread 1)

(...)

 (sub from Thread 3)

 (sub from Thread 3)

 (sub from Thread 4)
#+end_src
Why are the Threads 3 and 4 still trying and being able to read from an empty channel?

*** *asst_3u12cn4wgxzMHdgdVzbVr6CK*
In your Go program, you have concurrency issues due to multiple goroutines attempting to read from the same channel concurrently without proper synchronization.

The primary issue here arises in the following part of your channel reading loop:

#+begin_src go
for i := range channel {
    go func() {
        fmsg := <-channel
        fmt.Println(fmsg + " (sub from Thread 3)\n")
        count++
    }()

    go func() {
        fmsg := <-channel
        fmt.Println(fmsg + " (sub from Thread 4)\n")
        count++
    }()

    msg := i
    fmt.Println(msg + " (sub from Thread 1)\n")
}
#+end_src

When you use i directly in your loop, one message is read and processed by Thread 1 immediately when range channel fetches a new message. Then, inside the two goroutines (func() instances), further attempts to read from the channel are made directly using <-channel. For each iteration (for each message sent by the publisher loop), you are creating two additional goroutines each trying to read from the same channel.

The race occurs because there isn’t any guarantee about when the goroutines will be scheduled to run in relation to when messages are sent, received by the loop's main body, or even in relation to each other. When a goroutine tries to read from a channel that has no messages (because it gets consumed by one of the threads or there's a scheduling delay leading to a late execution), it will read an empty value or block indefinitely if the channel is not yet closed.

Once the channel is closed, any attempts to read from it won't block, but rather immediately return the zero value of the channel's element type. This is the reason you're seeing empty messages as output from Threads 3 and 4.

Here's a summary:

Thread 1 reads a message as part of the for loop's range clause.
Thread 3 and 4 potentially compete for the next available messages, but depending on the timing, they might end up reading from the channel when no messages are left after it is closed, leading them just to print the zero-value message, which in the case of a string is an empty string "".
To fix this:

Eliminate concurrent reads inside the loop unless you specifically ensure that you send enough messages to fulfill all concurrent reads (which is prone to mistakes).
Directly handle each message within the main loop and avoid spawning additional concurrent readers unless you have a mechanism ensuring data is available before they attempt to read.
Here is a revised version without unnecessary concurrency on reading, which should help avoid the problem:

#+begin_src go
for msg := range channel {
    fmt.Println(msg + " (received by main thread)")
    count++
}
#+end_src

This way, you only read as many messages as are sent, and each read is handled sequentially. If you need to process them concurrently, ensure a proper design that matches the number of producers and consumers or use synchronization tools like additional channels, WaitGroups, etc., to manage the lifecycle and availability of data correctly.

* TODO Vocabulary
** TODO What is a Multiplexer? (ChatGPT prompting)

#+begin_src quote
<user>: What is a Multiplexer?

<assistant>: A multiplexer, also known as a data selector, is a digital
electronic device that allows multiple input signals to be transmitted through a
single output line. It selects one input signal at a time and routes it to the
output line based on a control signal. Multiplexers are commonly used in various
applications like telecommunications, computer systems, digital data
transmission, and analog-to-digital conversion.

In simpler terms, a multiplexer acts like a traffic controller for data. It
takes multiple input signals and combines them into one output signal, which can
then be transmitted over a single line or channel. The selection of the input
signal to be transmitted is determined by the control signal, which typically
consists of binary data or a digital signal.

Multiplexers are an essential component in data communication systems as they
enable the efficient transmission of multiple signals over limited channels.
They help in optimizing communication infrastructure, reducing the necessary
number of physical connections, and saving costs and space.

<user>: More specifically, how does that apply to computer programing, with go
language?

<assistant>: In computer programming, including Go language, multiplexers can be
used to handle concurrent or parallel processing. In Go, this is achieved using
the concept of goroutines and channels.

Goroutines are lightweight threads that allow concurrent execution of functions
or code blocks. Channels, on the other hand, provide a way for goroutines to
communicate and synchronize their operations. A multiplexer in Go can be
implemented using a select statement, which acts as a multiplexing control
structure.

With a select statement in Go, you can listen to multiple channels
simultaneously and execute the corresponding case block when the data is
available on any of the channels. This allows you to coordinate and handle input
or output from multiple goroutines efficiently.

Here's a simple example of a multiplexer in Go using the select statement:


#+end_src

#+begin_src go
package main

import (
	"fmt"
	"time"
)

func main() {
	ch1 := make(chan string)
	ch2 := make(chan string)

	go func() {
		time.Sleep(2 * time.Second)
		ch1 <- "Hello from channel 1"
	}()

	go func() {
		time.Sleep(1 * time.Second)
		ch2 <- "Hello from channel 2"
	}()

	for i := 0; i < 2; i++ {
		select {
		case msg1 := <-ch1:
			fmt.Println(msg1)
		case msg2 := <-ch2:
			fmt.Println(msg2)
		}
	}
}
#+end_src

#+RESULTS:
: Hello from channel 2
: Hello from channel 1

#+begin_src quote
In this code snippet, two goroutines are created to send messages through
different channels after a specific delay. The select statement in the main
function listens to both channels and prints the message received first.

Multiplexing using select in Go allows you to handle multiple concurrent
operations efficiently, providing more flexibility and control in your programs.

#+end_src
