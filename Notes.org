
#+title: Readme
* DONE Types and variables declaration
DEADLINE: <2023-12-04 Mon> SCHEDULED: <2023-12-04 Mon>

#+begin_src go
package main

import "fmt"


type ID int

var (b bool = true
	c int = 10
	d string = "Pedro"
	e float64 = 10.0
	f ID = 1)

const a = "Olá, mundo!"

func main() {
	fmt.Printf("Mensagem do fantasma da máquina: %v \n", a)
	fmt.Printf("O tipo criado pelo fantasma da máquina: %T \n", f)
	fmt.Printf("Exemplos de tipos nativos: %T %T %T %T", b, c, d, e)
}
#+end_src

#+RESULTS:
: Mensagem do fantasma da máquina: Olá, mundo!
: O tipo criado pelo fantasma da máquina: main.ID
: Exemplos de tipos nativos: bool int string float64

* DONE Structs and Interfaces
DEADLINE: <2023-12-06 Wed> SCHEDULED: <2023-12-06 Wed>

#+begin_src go :tangle ./fundacao/structs.go
package fundacao

import "fmt"

// Custom Type StruFoo
type StruFoo struct {
	S string
	I int
	B bool
}

// Composed custom type StruFooBar
type StruFooBar struct {
	SS []string
	II []int
	BB []bool
	StruFoo
}

// Custom type, StruBarfoo, relying on another Custom Type, StruFoo
type StruBarfoo struct {
	SS   []string
	II   []int
	BB   []bool
	SFoo StruFoo
}

func Structs() {
	struFoo := StruFoo{
		S: "Foo",
		I: 256,
		B: true,
	}

	struFooBar := StruFooBar{
		SS:      []string{"Foo", "Bar"},
		II:      []int{256, 512},
		BB:      []bool{true, false},
		StruFoo: struFoo,
	}

	struBarfoo := StruBarfoo{
		SS:   []string{"Foo", "Bar"},
		II:   []int{256, 512},
		BB:   []bool{true, false},
		SFoo: struFoo,
	}
	fmt.Printf("struFoo: %v %T \n", struFoo, struFoo)
	fmt.Printf("struFooBar: %v %T \n", struFooBar, struFooBar)
	fmt.Printf("struBarfoo: %v %T \n\n", struBarfoo, struBarfoo)

	fmt.Println("Struct instances of StruFooBar and StruBarfoo will look identical, but aren't.")
	fmt.Println("Composition vs Standard type (implies direct access vs not direct access):")
	fmt.Printf("struFooBar.S (%v) == struBarfoo.SFoo.S (%v)? %v", struFooBar.S, struBarfoo.SFoo.S, struFooBar.S == struBarfoo.SFoo.S)
}
#+end_src

#+begin_src shell :results verbatim
go run ./main.go
#+end_src

#+RESULTS:
: struFoo: {Foo 256 true} fundacao.StruFoo
: struFooBar: {[Foo Bar] [256 512] [true false] {Foo 256 true}} fundacao.StruFooBar
: struBarfoo: {[Foo Bar] [256 512] [true false] {Foo 256 true}} fundacao.StruBarfoo
:
: Struct instances of StruFooBar and StruBarfoo will look identical, but aren't.
: Composition vs Standard type (implies direct access vs not direct access):
: struFooBar.S (Foo) == struBarfoo.SFoo.S (Foo)? true
* DONE Interfaces
Interface structurally share =GCD= (Greatest Common Denominator) logic for Types.

The class =A={2, 6, 26}= all have different set of factors. But, GCD(A)=2. That is, every one of the members of A have a common factor 2 which makes them similar.

All of the elements of A can be divided by two. That's there common capability.

The same can be said of =Interface= _I_, which are those types which have an implemented _function_ =F1= among their capabilities.

#+begin_src go :tangle ./fundacao/interfaces.go
package fundacao

import "fmt"

// Interfaces
type I interface {
	F1()
}

func (s StruFoo) F1() {
	fmt.Printf("StruFoo prints itself: %v \n", s)
}

func (s StruFooBar) F1() {
	fmt.Printf("StruFooBar prints itself: %v \n", s)
}

func (s StruBarfoo) F1() {
	fmt.Printf("StruBarfoo print itself: %v \n", s)
}

func Interfaces() {
	struFoo := StruFoo{
		S: "Foo",
		I: 256,
		B: true,
	}

	struFooBar := StruFooBar{
		SS:      []string{"Foo", "Bar"},
		II:      []int{256, 512},
		BB:      []bool{true, false},
		StruFoo: struFoo,
	}

	struBarfoo := StruBarfoo{
		SS:   []string{"Foo", "Bar"},
		II:   []int{256, 512},
		BB:   []bool{true, false},
		SFoo: struFoo,
	}

	fmt.Println("Interfaces:")
	fmt.Println("If all Types X, Y, Z have the same capability of F1(), F2() etc., then they share the same Interface I := {X | exists F1(), F2() etc such that X.F1(), X.F2() etc. is valid}")

	var i I
	i = struFoo
	i.F1()
	i = struFooBar
	i.F1()
	i = struBarfoo
	i.F1()
}
#+end_src
* DONE Pointers and Variables
When functions operate on variables it will make a copy, and operate on the copy.

If you want to mutate, you have to use pointers.

#+begin_src go :tangle ./fundacao/pointers-variables.go
package fundacao

import "fmt"

func (s *StruFoo) FM1() {
	s.S = "passed through FM1"
	fmt.Println("Passing through FM1, we have:", s.S)
}

func (s StruFoo) FnM2() {
	s.S = "passed through FM2"
	fmt.Println("Passing through FnM2, we have:", s.S)
}

func pointers() {
	i := StruFoo{
		S: "Foo",
		I: 256,
		B: true,
	}

	fmt.Println("Pointers:")
	fmt.Println("i value is:", i)
	p := &i
	p.FM1()
	fmt.Println("p is a pointer for i:", p)
	fmt.Println("after p.FM1(), we have: i.S =", i.S)
	i.FnM2()
	fmt.Println("after i.FnM2(), we have: i.S =", i.S)
}
#+end_src

* DONE Modules
A working manner to use any modules - either internal or external to the project - is to:
1) Import the module inside a go file.
2) Go to the root of the project, in a terminal
3) Run `go mod tidy`

Example of (1):
#+begin_src go
import (
	"fmt"
	"log"
	"os"

	"github.com/google/uuid"
)
#+end_src

This example uses several different `import`s. Both from an external project, and from the _core_ libraries language of go.

Example two of (1):
#+begin_src go
import (
	"fmt"

	fundacao "github.com/buddhilw/pos-go-expert/fundacao"
)
#+end_src

This example `import`s from the _core_ libraries (=fmt=) and from a internal module (=fundacao=)

Final consideration:
=go mod tidy= will automatically figure the dependency trees and version for the current project and update the list of dependencies, in case a new one is being used, or any of them is not being used (and then is discarded from the list).
* TODO Common Libraries
** TODO OS (Filesystem manipulation)
** TODO JSON Marshall/Unmarshall
** TODO HTTP Calls
*** TODO CEP HTTP call
* TODO Vocabulary
** TODO What is a Multiplexer? (ChatGPT prompting)

#+begin_src quote
<user>: What is a Multiplexer?

<assistant>: A multiplexer, also known as a data selector, is a digital
electronic device that allows multiple input signals to be transmitted through a
single output line. It selects one input signal at a time and routes it to the
output line based on a control signal. Multiplexers are commonly used in various
applications like telecommunications, computer systems, digital data
transmission, and analog-to-digital conversion.

In simpler terms, a multiplexer acts like a traffic controller for data. It
takes multiple input signals and combines them into one output signal, which can
then be transmitted over a single line or channel. The selection of the input
signal to be transmitted is determined by the control signal, which typically
consists of binary data or a digital signal.

Multiplexers are an essential component in data communication systems as they
enable the efficient transmission of multiple signals over limited channels.
They help in optimizing communication infrastructure, reducing the necessary
number of physical connections, and saving costs and space.

<user>: More specifically, how does that apply to computer programing, with go
language?

<assistant>: In computer programming, including Go language, multiplexers can be
used to handle concurrent or parallel processing. In Go, this is achieved using
the concept of goroutines and channels.

Goroutines are lightweight threads that allow concurrent execution of functions
or code blocks. Channels, on the other hand, provide a way for goroutines to
communicate and synchronize their operations. A multiplexer in Go can be
implemented using a select statement, which acts as a multiplexing control
structure.

With a select statement in Go, you can listen to multiple channels
simultaneously and execute the corresponding case block when the data is
available on any of the channels. This allows you to coordinate and handle input
or output from multiple goroutines efficiently.

Here's a simple example of a multiplexer in Go using the select statement:


#+end_src

#+begin_src go
package main

import (
	"fmt"
	"time"
)

func main() {
	ch1 := make(chan string)
	ch2 := make(chan string)

	go func() {
		time.Sleep(2 * time.Second)
		ch1 <- "Hello from channel 1"
	}()

	go func() {
		time.Sleep(1 * time.Second)
		ch2 <- "Hello from channel 2"
	}()

	for i := 0; i < 2; i++ {
		select {
		case msg1 := <-ch1:
			fmt.Println(msg1)
		case msg2 := <-ch2:
			fmt.Println(msg2)
		}
	}
}
#+end_src

#+RESULTS:
: Hello from channel 2
: Hello from channel 1

#+begin_src quote
In this code snippet, two goroutines are created to send messages through
different channels after a specific delay. The select statement in the main
function listens to both channels and prints the message received first.

Multiplexing using select in Go allows you to handle multiple concurrent
operations efficiently, providing more flexibility and control in your programs.

#+end_src
